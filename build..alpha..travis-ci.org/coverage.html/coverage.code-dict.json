{"/home/travis/build/npmtest/node-npmtest-columns/test.js":"/* istanbul instrument in package npmtest_columns */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-columns/lib.npmtest_columns.js":"/* istanbul instrument in package npmtest_columns */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_columns = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_columns = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-columns/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-columns && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_columns */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_columns\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_columns.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_columns.rollup.js'] =\n            local.assetsDict['/assets.npmtest_columns.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_columns.__dirname +\n                    '/lib.npmtest_columns.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-columns/node_modules/columns/main.js":"// node-columns\n// MIT © Arjun Mehta\n// www.arjunmehta.net\n\n\nvar heartbeats = require('heartbeats');\nheartbeats.createHeart(Math.round(1000 / 24), 'view_refresh');\n\nvar MainView = require('./lib/MainView');\nvar Column = require('./lib/Column');\n\nvar idCount = 0;\n\n\nfunction create(opts) {\n    return new Columns(opts);\n}\n\nfunction Columns(opts) {\n\n    opts = opts || {};\n\n    opts.margin = opts.margin || {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n    };\n\n    opts.flow = opts.flow_mode === 'reset' ? false : true;\n    opts.overflow = opts.overflow !== undefined ? opts.overflow : 3;\n    opts.maximum_buffer = opts.maximum_buffer || 500;\n    opts.tab_size = opts.tab_size || 2;\n    opts.print = opts.print || false;\n\n    this.opts = opts;\n    this.view = new MainView(this, opts.mode, opts.print);\n    this.columns = {};\n}\n\n\n// core getter/setter properties\n\nObject.defineProperty(Columns.prototype, 'flow_mode', {\n    get: function() {\n        return this.opts.flow === false ? 'reset' : 'push';\n    },\n    set: function(flow) {\n        this.opts.flow = flow === 'reset' ? false : true;\n    }\n});\n\nObject.defineProperty(Columns.prototype, 'overflow', {\n    get: function() {\n        return this.opts.overflow;\n    },\n    set: function(overflow) {\n        this.opts.overflow = overflow;\n    }\n});\n\nObject.defineProperty(Columns.prototype, 'margin', {\n    get: function() {\n        return this.opts.margin;\n    },\n    set: function(margin) {\n        this.opts.margin = margin;\n        this.view.refresh();\n    }\n});\n\nObject.defineProperty(Columns.prototype, 'header_separator', {\n    get: function() {\n        return this.opts.header_separator !== undefined ? this.opts.header_separator : '_';\n    },\n    set: function(header_separator) {\n        this.opts.header_separator = header_separator;\n        this.view.refresh();\n    }\n});\n\nObject.defineProperty(Columns.prototype, 'column_separator', {\n    get: function() {\n        return this.opts.column_separator !== undefined ? this.opts.column_separator : ' ';\n    },\n    set: function(column_separator) {\n        this.opts.column_separator = column_separator;\n        this.view.refresh();\n    }\n});\n\n\n// core prototype methods\n\nColumns.prototype.redraw = function() {\n    this.view.refresh();\n};\n\nColumns.prototype.column = function(name) {\n    return this.columns[name];\n};\n\nColumns.prototype.addColumn = function(name, opts) {\n\n    if (typeof name === \"object\" && opts === undefined) {\n        opts = name;\n        name = undefined;\n    }\n\n    opts = opts || {};\n    opts.header = opts.header !== undefined ? opts.header : name;\n\n    name = name || 'column_' + (Math.random()).toString(36) + idCount++;\n    this.columns[name] = new Column(this, name, opts);\n    this.view.refresh();\n\n    return this.columns[name];\n};\n\nColumns.prototype.removeColumn = function(name) {\n    this.columns[name] = undefined;\n    this.view.refresh();\n};\n\n\nmodule.exports = exports = {\n    create: create\n};\n","/home/travis/build/npmtest/node-npmtest-columns/node_modules/columns/lib/MainView.js":"var empty_line;\n\nif (process.stdout.isTTY) {\n    empty_line = new Array(process.stdout.columns).join(' ');\n    process.stdout.on('resize', function() {\n        empty_line = new Array(process.stdout.columns).join(' ');\n    });\n} else {\n    empty_line = new Array(500).join(' ');\n}\n\n\nfunction MainView(columns, mode, print) {\n\n    this.columns = columns;\n\n    this.tty_columns = process.stdout.columns;\n    this.tty_rows = process.stdout.rows;\n    this.empty_line = empty_line;\n\n    trackStdout(this);\n    displayMode(this, mode, print);\n}\n\nObject.defineProperty(MainView, 'empty_line', {\n    get: function() {\n        return empty_line;\n    }\n});\n\n\n// main view getter/setter properties\n\nObject.defineProperty(MainView.prototype, 'width', {\n    get: function() {\n        return this.tty_columns - this.columns.opts.margin.left - this.columns.opts.margin.right;\n    }\n});\n\nObject.defineProperty(MainView.prototype, 'height', {\n    get: function() {\n        return this.tty_rows - this.columns.opts.margin.top - this.columns.opts.margin.bottom;\n    }\n});\n\nObject.defineProperty(MainView.prototype, 'empty_line', {\n    get: function() {\n        return empty_line;\n    }\n});\n\n\n// main view prototype methods\n\nMainView.prototype.refresh = function() {\n\n    this.tty_columns = process.stdout.columns;\n    this.tty_rows = process.stdout.rows;\n    this.empty_line = new Array(this.tty_columns + 1).join(' ');\n    process.stdout.write('\\033[2J');\n\n    this.buildColumnArray();\n    this.calculateColumnWidths();\n};\n\nMainView.prototype.buildColumnArray = function() {\n\n    this.column_view_array = [];\n\n    for (var column_name in this.columns.columns) {\n        if (this.columns.columns[column_name] !== undefined) {\n            this.columns.columns[column_name].displaying = false;\n            this.column_view_array.push(this.columns.columns[column_name]);\n        }\n    }\n};\n\nMainView.prototype.calculateColumnWidths = function() {\n\n    var columns = this.columns;\n\n    var column, column_width,\n        separator_size = columns.column_separator.length,\n        total_width = this.width,\n        number_of_column_views = this.column_view_array.length,\n        flex_columns = [],\n        percentage_columns = [],\n        min_width = 5,\n        number_of_flex_columns = 0,\n        flex_column_width,\n        extra,\n        i;\n\n    var available_width = total_width - (separator_size * (number_of_column_views - 1));\n    var main_width = available_width;\n    var separator_percentage = separator_size / total_width;\n    var total_separator_percentage = separator_percentage * (number_of_column_views - 1);\n    var percentage_left = 1 - total_separator_percentage;\n\n    for (i = 0; i < this.column_view_array.length; i++) {\n\n        column = this.column_view_array[i];\n        column_width = 0;\n\n        if (column.opts.percentage_width) {\n\n            column_width = Math.floor(column.opts.percentage_width * percentage_left * main_width);\n            column.view.width = column_width;\n            percentage_columns.push(column);\n\n        } else if (column.opts.fixed_width) {\n\n            column_width = column.opts.fixed_width;\n            column.view.width = column_width;\n\n        } else {\n\n            flex_columns.push(column);\n\n        }\n\n        available_width -= column_width;\n    }\n\n    number_of_flex_columns = flex_columns.length;\n\n    if (available_width - (number_of_flex_columns * min_width) < 0) {\n        this.column_view_array.pop();\n        this.calculateColumnWidths();\n        return;\n    }\n\n    if (number_of_flex_columns > 0) {\n\n        flex_column_width = Math.floor(available_width / number_of_flex_columns);\n        extra = available_width - (flex_column_width * number_of_flex_columns);\n\n        for (i = 0; i < number_of_flex_columns; i++) {\n            flex_columns[i].view.width = flex_column_width + (extra > 0 ? 1 : 0);\n            extra--;\n        }\n\n    } else if (percentage_columns.length > 0) {\n\n        var percentage_column_extra = Math.floor(available_width / percentage_columns.length);\n        extra = available_width - (percentage_column_extra * percentage_columns.length);\n        for (i = 0; i < percentage_columns.length; i++) {\n            percentage_columns[i].view.width = percentage_columns[i].view.width + percentage_column_extra + (extra > 0 ? 1 : 0);\n            extra--;\n        }\n    }\n\n    this.calculateColumnPositions();\n};\n\nMainView.prototype.calculateColumnPositions = function() {\n\n    if (this.column_view_array.length > 0) {\n\n        this.column_view_array[0].view.x = this.columns.margin.left;\n\n        for (var i = 1; i < this.column_view_array.length; i++) {\n            this.column_view_array[i].view.x = this.column_view_array[i - 1].view.x + this.column_view_array[i - 1].view.width + this.columns.column_separator.length;\n        }\n\n        this.redraw();\n    }\n};\n\nMainView.prototype.redraw = function() {\n\n    for (var i = 0; i < this.column_view_array.length; i++) {\n        this.column_view_array[i].displaying = true;\n        this.column_view_array[i].view.redrawAll(i !== 0 ? true : false);\n    }\n};\n\n\n// add a listener for tty resizes\n\nfunction trackStdout(view) {\n\n    if (process.stdout.isTTY) {\n        process.stdout.on('resize', function() {\n            view.refresh();\n        });\n    }\n}\n\n\n// set view modes on start/end\n\nfunction displayMode(main, mode, print) {\n\n    var printer;\n    var buffer;\n\n    if (mode !== 'debug') {\n\n        process.stdout.write('\\033[?25l\\033[?1049h\\033[H');\n        process.on('exit', function() {\n            process.stdout.write('\\033[?25h\\033[?1049l');\n\n            if (print) {\n                for (var columnName in main.columns.columns) {\n\n                    buffer = main.columns.columns[columnName].buffer;\n                    console.log('========================================================================');\n                    console.log(main.columns.columns[columnName].header)\n                    console.log('========================================================================');\n\n                    for (var i = buffer.offset; i < buffer.size; i++) {\n                        console.log(buffer.line(i).toString());\n                    }\n                    process.stdout.write('\\033[0m');\n                }\n            }\n        });\n    }\n}\n\n\nmodule.exports = exports = MainView;\n","/home/travis/build/npmtest/node-npmtest-columns/node_modules/columns/lib/Column.js":"var util = require('util');\nvar stream = require('stream');\nvar PassThrough = stream.PassThrough || require('readable-stream').PassThrough;\n\nvar ColumnBuffer = require('./ColumnBuffer');\nvar ColumnStream = require('./ColumnStream');\nvar ColumnView = require('./ColumnView');\n\nutil.inherits(Column, PassThrough);\n\n\nfunction Column(columns, name, opts) {\n\n    opts = opts || {};    \n    this.opts = opts;\n\n    PassThrough.call(this);\n\n    this.name = name;\n    this.columns = columns;\n\n    this.buffer = new ColumnBuffer(this);\n    this.stream = new ColumnStream(this);\n    this.view = new ColumnView(this);\n\n    this.displaying = true;        \n\n    if (opts.width) {\n        this.width = opts.width;\n    }\n}\n\n\n// column getter/setter properties\n\nObject.defineProperty(Column.prototype, 'width', {\n    get: function() {\n        return this.opts.width;\n    },\n    set: function(width) {\n\n        var setWidth = width;\n\n        this.opts.percentage_width = undefined;\n        this.opts.fixed_width = undefined;\n\n        if (typeof width === 'string') {\n            if (width.indexOf('%') > -1) {\n\n                setWidth = width.replace(/ /g, '');\n                width = setWidth.replace(/\\%/g, '');\n                this.opts.percentage_width = ~~width / 100;\n            } else {\n                setWidth = ~~width;\n            }\n        }\n\n        this.opts.width = setWidth;\n\n        if (typeof setWidth === 'number') {\n            this.opts.fixed_width = setWidth;\n        }\n\n        this.columns.view.refresh();\n    }\n});\n\nObject.defineProperty(Column.prototype, 'header', {\n    get: function() {\n        return this.opts.header;\n    },\n    set: function(header) {\n        this.opts.header = header;\n        this.view.redrawHeader();\n    }\n});\n\n\n// column prototype methods\n\nColumn.prototype.redraw = function() {\n    this.view.redrawAll();\n};\n\nColumn.prototype.clear = function() {\n    this.stream.data = [''];\n    this.view.clear();\n};\n\nColumn.prototype.remove = function() {\n    this.columns.removeColumn(this.id);\n};\n\nColumn.prototype.set = function(opts) {\n    for (var option in opts) {\n        this[option] = opts[option];\n    }\n};\n\nColumn.prototype.addColumn = function() {\n    this.columns.addColumn.apply(null, arguments);\n};\n\n\nmodule.exports = exports = Column;\n","/home/travis/build/npmtest/node-npmtest-columns/node_modules/columns/lib/ColumnBuffer.js":"var ColumnLine = require('./ColumnLine');\n\n\nfunction ColumnBuffer(column) {\n\n    this.column = column;\n    this.max_size = column.columns.opts.maximum_buffer;\n\n    this.new_lines = 0;\n    this.current_modified = false;\n\n    this.data = column.opts.raw === true ? [new ColumnLine('', {tab_size: column.columns.opts.tab_size})] : [];\n\n    this.offset = 0;\n}\n\n\n// column buffer prototype getter/setter properties\n\nObject.defineProperty(ColumnBuffer.prototype, 'size', {\n    get: function() {\n        return this.data.length + this.offset;\n    }\n});\n\n\n// column buffer prototype methods\n\nColumnBuffer.prototype.line = function(num) {\n\n    if (num - this.offset < 0) {\n        return new ColumnLine(new Array(400).join('-'));\n    } else {\n        return this.data[num - this.offset];\n    }\n};\n\nColumnBuffer.prototype.add = function(line) {\n\n    this.data.push(new ColumnLine(line, {\n        legacy: this.data[this.data.length - 1],\n        tab_size: this.column.columns.opts.tab_size\n    }));\n\n    this.new_lines++;\n\n    if (this.data.length > this.max_size) {\n        this.data.shift();\n        this.offset++;\n    }\n};\n\nColumnBuffer.prototype.newLine = function(data) {\n    this.add(data || '');\n};\n\nColumnBuffer.prototype.backspace = function() {\n    this.data[this.data.length - 1].backspace();\n};\n\nColumnBuffer.prototype.addGeneric = function(data) {\n\n    var dataSplit = data.split(/\\n/);\n\n    this.data[this.data.length - 1].write(dataSplit.shift());\n\n    for (var i = 0; i < dataSplit.length; i++) {\n        this.add(dataSplit[i]);\n    }\n\n    return dataSplit.length;\n};\n\nColumnBuffer.prototype.writeToCurrentLine = function(data) {\n    this.data[this.data.length - 1].write(data);\n    this.current_modified = true;\n};\n\nColumnBuffer.prototype.reset = function() {\n    this.new_lines = 0;\n    this.current_modified = false;\n};\n\n\nmodule.exports = exports = ColumnBuffer;\n","/home/travis/build/npmtest/node-npmtest-columns/node_modules/columns/lib/ColumnLine.js":"var width = require('wcwidth.js');\nvar ANSIState = require('ansi-state');\n\nvar MainView = require('./MainView');\nvar color_regex = /\\x1b\\[[0-9;]*m/g;\n\n\n// column lines are very special strings.\n\nfunction ColumnLine(value, opts) {\n\n    opts = opts || {};\n\n    this._value = value || '';\n\n    this.tab_size = opts.tab_size || 2;\n    this.legacy_state = opts.legacy !== undefined ? opts.legacy.ansi_state : new ANSIState();\n    this.ansi_state = new ANSIState(this.legacy_state);\n    this.wrap_state = null;\n\n    this.codes = {};\n    this.codeList = [];\n\n    Object.defineProperty(this, 'length', {\n        get: function() {\n            return this.value.length;\n        }\n    });\n\n    this.buildCodes();\n}\n\nColumnLine.prototype = new String;\n\nColumnLine.prototype.toString = ColumnLine.prototype.valueOf = function() {\n    return this._value;\n};\n\n\n// column line prototype getter/setter properties\n\nObject.defineProperty(ColumnLine.prototype, 'width', {\n    get: function() {\n        return width(this.value);\n    }\n});\n\nObject.defineProperty(ColumnLine.prototype, 'value', {\n    get: function() {\n        return this._value;\n    },\n    set: function(value) {\n        this._value = value;\n        this.buildCodes();\n    }\n});\n\n\n// column line prototype methods\n\nColumnLine.prototype.backspace = function() {\n    this.value = this.slice(0, -2);\n    return this;\n};\n\nColumnLine.prototype.write = function(data) {\n    this.value += data;\n    return this;\n};\n\n\nColumnLine.prototype.trimmed = function(to_length, wrap) {\n\n    if (wrap === true) {\n        return this.trimmedWrap(to_length);\n    } else {\n        return this.trimmedNoWrap(to_length);\n    }\n};\n\nColumnLine.prototype.trimmedNoWrap = function(to_length) {\n\n    var i = 0,\n        line = (this.replaceTabs(this.codes.strippedLine) + MainView.empty_line).substring(0, to_length),\n        truncated = line.substring(0, to_length),\n        truncated_width = width(truncated);\n\n    while (truncated_width > to_length) {\n        i++;\n        truncated = line.substring(0, to_length - i);\n        truncated_width = width(truncated);\n    }\n\n    truncated = this.insertCodes(truncated, 0);\n\n    return [truncated];\n};\n\nColumnLine.prototype.trimmedWrap = function(to_length, raw_line, offset, total_length, lineArray) {\n\n    lineArray = lineArray === undefined ? [] : lineArray;\n    offset = offset === undefined ? 0 : offset;\n    raw_line = raw_line || this.replaceTabs(this.codes.strippedLine);\n    total_length = total_length === undefined ? raw_line.length : total_length;\n\n    var i = 0,\n        line = raw_line + MainView.empty_line,\n        truncated = line.substring(offset, offset + to_length),\n        truncated_width = width(truncated);\n\n    while (truncated_width > to_length) {\n        i++;\n        truncated = line.substring(offset, offset + to_length - i);\n        truncated_width = width(truncated);\n    }\n\n    for (var new_offset = offset + to_length - i; new_offset >= offset; new_offset--) {\n        if ((line[new_offset - 1] !== ' ' && line[new_offset] === ' ') || (line[new_offset - 1] === ' ' && line[new_offset] !== ' ')) break;\n    }\n\n    if (new_offset > offset) {\n        truncated = line.substring(offset, new_offset);\n        truncated_width = width(truncated);\n        while (line[new_offset] === ' ') {\n            new_offset++;\n        }\n    } else {\n        new_offset = offset + to_length - i;\n    }\n\n    lineArray.push(this.insertCodes(truncated, offset) + MainView.empty_line.substring(0, to_length - truncated_width));\n\n    if (new_offset < total_length) {\n        this.trimmedWrap(to_length, raw_line, new_offset, total_length, lineArray);\n    }\n\n    return lineArray;\n};\n\nColumnLine.prototype.replaceTabs = function(line) {\n\n    var j = 0,\n        tab_size = this.tab_size;\n\n    for (var i = 0; i < line.length; i++) {\n        if (line[i] === '\\t') line = spliceSlice(line, i, 1, '         '.slice(0, tab_size - (j % tab_size)));\n        else if (line[i] === '\\r') line = spliceSlice(line, i, 1, '');\n        j += width(line[i]);\n    }\n\n    return line;\n};\n\nColumnLine.prototype.buildCodes = function() {\n\n    var idx = 0,\n        line = this._value,\n        codes = this.match(color_regex),\n        codeArray = [],\n        code, codeObj, indexOfZero;\n\n    if (codes !== null) {\n\n        for (var i = 0; i < codes.length; i++) {\n\n            idx = line.indexOf(codes[i]);\n            code = codes[i];\n\n            codeObj = {\n                code: code,\n                idx: idx\n            };\n\n            codeArray[i] = codeObj;\n            line = spliceSlice(line, idx, code.length);\n        }\n    }\n\n    this.ansi_state.updateWithArray(codes);\n\n    this.codes = {\n        codeArray: codeArray,\n        strippedLine: line\n    };\n};\n\nColumnLine.prototype.insertCodes = function(line, offset) {\n\n    var codes = this.codes.codeArray,\n        length = line.length,\n        state = [],\n        code, idx;\n\n    if (offset === 0) {\n        this.wrap_state = new ANSIState(this.legacy_state);\n    }\n\n    for (var i = codes.length - 1; i >= 0; i--) {\n        idx = codes[i].idx;\n\n        if (idx < length + offset && idx >= offset) {\n            code = codes[i].code;\n            state.unshift(code);\n            line = spliceSlice(line, idx - offset, 0, code);\n        }\n    }\n\n    line = this.wrap_state.code + line;\n    this.wrap_state.updateWithArray(state);\n\n    return line + '\\u001b[0m';\n};\n\n\n// helper methods\n\nfunction spliceSlice(str, idx, count, add) {\n    return str.slice(0, idx) + (add || '') + str.slice(idx + count);\n}\n\n\nmodule.exports = exports = ColumnLine;\n","/home/travis/build/npmtest/node-npmtest-columns/node_modules/columns/lib/ColumnStream.js":"var split = require('split');\nvar stripBom = require('strip-bom');\n\n// strip all codes except styles.\nvar regex = /^(?!\\x1b\\[[0-9;]*m)(?:(?:\\u001b\\[)|\\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\\u001b[A-M]/g;\n\n\nfunction ColumnStream(column) {\n\n    var _this = this;\n    var new_lines = 0;\n\n    this.column = column;\n    this.column.setEncoding('utf8');\n\n    this.buffer = column.buffer;\n\n    this.newline_waiting = false;\n    this.linesync = 1;\n\n    if (column.opts.raw) {\n        this.column.on('data', function(data) {\n            _this.parseData(cleanData(data));\n        });\n    } else {\n        this.column.pipe(split()).on('data', function(data) {\n            _this.buffer.newLine(cleanData(data));\n        });\n    }\n}\n\n\n// column stream prototype methods\n\nColumnStream.prototype.parseData = function(data) {\n\n    if (data === '\\r') {\n        if (this.newline_waiting === true) {\n            this.buffer.newLine('');\n        }\n        this.newline_waiting = true;\n    } else {\n\n        if (data === '\\n') {\n            this.buffer.newLine('');\n        } else if (data === '\\b') {\n            this.buffer.backspace();\n        } else if (data.match(/\\n/) !== null) {\n            this.buffer.addGeneric(data);\n        } else if (data === '') {\n\n        } else {\n            if (this.newline_waiting === true) {\n                this.buffer.newLine('');\n            }\n            this.buffer.writeToCurrentLine(data);\n        }\n\n        this.newline_waiting = false;\n    }\n};\n\n\n// helper methods\n\nfunction cleanData(data) {\n    return stripBom(data).replace(regex, '');\n}\n\n\nmodule.exports = exports = ColumnStream;\n","/home/travis/build/npmtest/node-npmtest-columns/node_modules/columns/lib/ColumnView.js":"var heartbeats = require('heartbeats');\nvar ColumnLine = require('./ColumnLine');\n\n\nfunction ColumnView(column) {\n\n    var _this = this,\n        buffer = column.buffer,\n        buffer_new_lines = buffer.new_lines,\n        new_lines = 0,\n        threshold = true;\n\n    this.column = column;\n    this.stream = column.stream;\n    this.buffer = buffer;\n\n    this.main = column.columns;\n\n    this.display_cache = [];\n    this.buffer_cache = [];\n\n    this.wrap = column.opts.wrap;\n    this.flow = this.main.opts.flow;\n\n    this.cursorY = 0;\n    this.current_line = column.opts.raw === true ? 0 : -1;\n    this.current_line_height = column.opts.raw === true ? 1 : 0;\n\n    this.x = 0;\n    this.data_top = 0;\n    this.data_height = 0;\n\n    this.header_separator = new Array(this.main.view.width).join(this.main.header_separator);\n\n    heartbeats.heart('view_refresh').createEvent(1, function(heartbeat, last) {\n\n        if (column.displaying === true) {\n\n            buffer_new_lines = buffer.new_lines;\n            threshold = (buffer_new_lines < _this.data_height || buffer_new_lines - new_lines < 1000 || buffer_new_lines === new_lines) ? true : false;\n            new_lines = buffer_new_lines;\n\n            if (threshold === true) {\n                _this.renderBuffer(buffer_new_lines);\n                buffer.reset();\n            }\n        }\n    });\n}\n\n\n// column view prototype methods\n\nColumnView.prototype.recalculate = function() {\n\n    var headerHeight = (this.column.header ? (this.main.header_separator ? 2 : 1) : 0);\n\n    this.data_height = this.main.view.height - headerHeight;\n    this.data_top = this.main.margin.top + headerHeight;\n\n    this.header_separator = new Array(this.main.view.width).join(this.main.header_separator);\n};\n\nColumnView.prototype.redrawAll = function(separator) {\n\n    this.recalculate();\n    this.redrawHeader();\n    this.rebuildFrontDisplayCache();\n    this.rebuildEndDisplayCache();\n\n    if (separator === true) {\n        this.redrawSeparator();\n    }\n\n    this.redraw();\n};\n\nColumnView.prototype.redraw = function() {\n\n    if (this.buffer.size > 0) {\n        if (this.flow === true) {\n            this.redrawDataFlow(0);\n        } else {\n            this.redrawDataEffeciently();\n        }\n    }\n};\n\nColumnView.prototype.redrawHeader = function() {\n\n    if (this.column.header) {\n        cursorPos(this.x, this.main.margin.top + 0);\n        writeToScreen(new ColumnLine(this.column.header).trimmed(this.width)[0]);\n\n\n        if (this.main.header_separator) {\n            cursorPos(this.x, this.main.margin.top + 1);\n            writeToScreen(this.header_separator.substring(0, this.width));\n        }\n    }\n};\n\nColumnView.prototype.redrawSeparator = function() {\n\n    var column_separator = this.main.column_separator;\n\n    if (column_separator) {\n        var x = this.x - column_separator.length;\n\n        for (var i = 0; i < this.main.view.height; i++) {\n            cursorPos(x, this.main.margin.top + i);\n            writeToScreen(column_separator);\n        }\n    }\n};\n\nColumnView.prototype.redrawDataFlow = function(new_lines) {\n\n    this.current_line += new_lines;\n    this.rebuildFrontDisplayCache();\n\n    if (this.display_cache.length < this.data_height - 1) {\n        this.fillDown(0, this.data_height - 1, 0);\n    } else {\n        this.fillUp(this.data_height - 1, 0, this.buffer.size - 1);\n    }\n};\n\nColumnView.prototype.redrawDataEffeciently = function() {\n\n    if (this.buffer_cache.length > this.data_height) {\n        this.clearToOverflow();\n    } else {\n        this.clear();\n        this.fillUpUsingBuffer(this.buffer_cache.length, 0);\n    }\n};\n\nColumnView.prototype.renderBuffer = function(new_lines) {\n\n    if (this.flow === true) {\n        if (new_lines > 0) {\n            this.redrawDataFlow(new_lines);\n        } else if (this.buffer.current_modified === true) {\n            this.redrawCurrentLineFlow();\n        }\n    } else {\n        if (this.buffer.current_modified === true) {\n            this.redrawCurrentLine();\n        }\n        if (new_lines > 0) {\n            this.printNewLines(new_lines);\n        }\n    }\n};\n\nColumnView.prototype.rebuildFrontDisplayCache = function() {\n\n    this.display_cache = [];\n\n    for (var i = 0; i < this.current_line; i++) {\n        this.display_cache = this.display_cache.concat(this.buffer.line(i).trimmed(this.width, this.wrap));\n        if (this.display_cache.length > this.data_height) {\n            break;\n        }\n    }\n};\n\nColumnView.prototype.rebuildEndDisplayCache = function() {\n\n    this.buffer_cache = [];\n\n    for (var i = this.current_line; i >= 0; i--) {\n        this.buffer_cache = this.buffer_cache.concat(this.buffer.line(i).trimmed(this.width, this.wrap).reverse());\n        if (this.buffer_cache.length > this.data_height) {\n            break;\n        }\n    }\n};\n\nColumnView.prototype.fillUpUsingBuffer = function(from, to) {\n\n    var length = from - to > this.buffer_cache.length ? this.buffer_cache.length : from - to;\n    from = length - to;\n\n    for (var i = 0; i < length; i++) {\n        this.cursorY = from - i - 1;\n        this.printLineDirect(this.buffer_cache[i]);\n    }\n\n    this.cursorY = from;\n};\n\nColumnView.prototype.fillUp = function(from, to, buffer_line) {\n\n    var line_array = this.buffer.line(buffer_line).trimmed(this.width, this.wrap),\n        i = from,\n        j = line_array.length - 1,\n        dest = 0;\n\n\n    while (i >= to) {\n\n        this.cursorY = i;\n        this.printLine(line_array[j], false);\n        j--;\n\n        if (j < dest) {\n            buffer_line--;\n            line_array = this.buffer.line(buffer_line).trimmed(this.width, this.wrap);\n            j = line_array.length - 1;\n            dest = 0;\n        }\n\n        i--;\n    }\n\n    this.cursorY = from + 1;\n};\n\nColumnView.prototype.fillDown = function(from, to, buffer_line) {\n\n    var line_array = this.buffer.line(buffer_line).trimmed(this.width, this.wrap),\n        i = from,\n        j = 0,\n        dest = line_array.length - 1;\n\n    while (i <= to) {\n\n        this.cursorY = i;\n        this.printLine(line_array[j], false);\n        j++;\n\n        if (j > dest) {\n\n            buffer_line++;\n\n            if (buffer_line > this.buffer.size - 1) break;\n\n            line_array = this.buffer.line(buffer_line).trimmed(this.width, this.wrap);\n            j = 0;\n            dest = line_array.length - 1;\n        }\n\n        i++;\n    }\n};\n\nColumnView.prototype.clear = function() {\n\n    var blank_line = this.main.view.empty_line.substring(0, this.width);\n\n    this.cursorY = 0;\n    for (var i = 0; i < this.data_height; i++) {\n        this.printLineDirect(blank_line);\n    }\n    this.cursorY = 0;\n};\n\nColumnView.prototype.clearFrom = function(from, num_lines) {\n\n    var blank_line = this.main.view.empty_line.substring(0, this.width);\n\n    for (var i = 0; i < num_lines; i++) {\n        this.cursorY = from - i;\n        this.printLineDirect(blank_line);\n    }\n    this.cursorY = from - num_lines;\n};\n\nColumnView.prototype.checkOverflow = function() {\n\n    if (this.cursorY + 1 > this.data_height) {\n        this.clearToOverflow();\n    }\n};\n\nColumnView.prototype.clearToOverflow = function() {\n    this.clear();\n    this.fillUpUsingBuffer(this.main.overflow, 0);\n};\n\nColumnView.prototype.printNewLines = function(num_lines) {\n\n    if (num_lines > this.data_height) {\n        this.current_line += num_lines;\n        this.fillUp(this.data_height - 1, 0, this.current_line);\n    } else {\n        for (var i = 0; i < num_lines; i++) {\n            this.current_line++;\n            this.printBufferLine(this.current_line);\n        }\n    }\n};\n\nColumnView.prototype.printBufferLine = function(buffer_index) {\n\n    var line_array = this.buffer.line(buffer_index).trimmed(this.width, this.wrap);\n    this.current_line_height = line_array.length;\n\n    for (var i = 0; i < line_array.length; i++) {\n        this.printLine(line_array[i]);\n    }\n};\n\nColumnView.prototype.clearCurrentLine = function() {\n    this.clearFrom(this.cursorY, this.current_line_height);\n    for (var i = 0; i < this.current_line_height; i++) {\n        this.buffer_cache.shift();\n    }\n};\n\nColumnView.prototype.redrawCurrentLine = function() {\n    this.clearCurrentLine();\n    this.printBufferLine(this.current_line);\n};\n\nColumnView.prototype.redrawCurrentLineFlow = function() {\n\n    var line_array = this.buffer.line(this.current_line).trimmed(this.width, this.wrap);\n\n    if (this.current_line_height < line_array.length) {\n        this.redrawDataFlow(0);\n        return;\n    }\n\n    this.clearCurrentLine();\n    this.current_line_height = line_array.length;\n\n    for (var i = 0; i < line_array.length; i++) {\n        this.printLine(line_array[i]);\n    }\n};\n\nColumnView.prototype.printLine = function(line) {\n\n    if (this.flow === false) {\n        this.checkOverflow();\n    }\n\n    this.addToBufferCache(line);\n    this.printLineDirect(line);\n};\n\nColumnView.prototype.printLineDirect = function(line) {\n\n    this.dataCursorPos(this.cursorY);\n    writeToScreen(line);\n    this.cursorY++;\n};\n\nColumnView.prototype.addToBufferCache = function(line) {\n\n    this.buffer_cache.unshift(line);\n\n    if (this.buffer_cache.length > this.data_height) {\n        this.buffer_cache.pop();\n    }\n};\n\nColumnView.prototype.dataCursorPos = function(y) {\n    cursorPos(this.x, this.cursorY + this.data_top);\n};\n\n\n// helper methods\n\nfunction cursorPos(x, y) {\n    process.stdout.cursorTo(x, y);\n}\n\nfunction writeToScreen(line) {\n    process.stdout.write(line);\n}\n\n\nmodule.exports = exports = ColumnView;\n"}